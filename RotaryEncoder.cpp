/****************************************************************************/
/*	Rotary Encoder read Base Class											*/
/*																			*/
/*	本ファイルは，Rotary Encoder reader の Base Class を定義したものである．	*/
/*																			*/
/*	■制約事項																*/
/*	　・本 class ではRotary Encoder のENC_AをPD2(IRQ0)に，ENC_BをPD3に接続する	*/
/*  　・本 class ではIRQ0を利用するため，同時に複数のインスタンス生成は出来ない．	*/
/*  　・ライセンスはGPLに準じるものとする．										*/
/*																			*/
/*											東京国際工科専門職大学　荒金匡德	*/
/****************************************************************************/
/* #000		2021/01/15 初版										荒金匡德		*/
/****************************************************************************/
#include "RotaryEncoder.h"

int	dspl =  0;						// 割込みで検知したエンコーダ変位(1:右/0:静止/-1:左)

RotaryEncoder::RotaryEncoder(void){
	PORTD |= 0b00001100;			// エンコーダ A/B 端子をPULL UP 
	DDRD &= 0b11110011;				// エンコーダ A/B 端子を入力指定
	EICRA = 0b00000010;				// IRQのDown Edge で割込み発生
	EIMSK |= 0b00000001;			// IRQ割込み有効設定
	sei();
}

/****************************************************************/
/*    Rotary Encoder変位取得関数									*/
/*    呼出形式：int		getDisplacement( void);					*/
/*    引　数：なし												*/
/*    戻り値：ロータリーエンコーダ回転方向（右:1/静止:0/左：-1）		*/
/*　　機　能：ロータリーエンコーダの回転方向を取得する．				*/
/*       　  アプリケーションは，本関数をポーリング形式で実行し		*/
/*		   　変位を取得する．変位情報は，アプリケーションが読み出す	*/
/*		   　まで保持され，読み出しと同時にクリアされる．			*/
/****************************************************************/
int	RotaryEncoder::getDisplacement(void){
	displacement = dspl;			// エンコーダ変位を取り込む
	cli();							// 割込み禁止
	dspl = 0;						// 読み終わった変位情報をクリア
	sei();							// 割込み許可
	return	displacement;			// 取得したエンコーダ変位を戻す
}
/* INT0 割込み処理												*/
ISR( INT0_vect){					// ENC_A のダウンエッジで割込み発生
	dspl = 1;						// 共有メモリに右回りを設定
	if( (PIND & 0b00001000) == 0){	// ENC_B が HIGH なら左回り
		dspl = -1;					// 共有メモリの左周りを設定
	}
}
