
kadai25-26.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000058a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000516  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000092  00800100  00800100  0000058a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002abf  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001658  00000000  00000000  000032d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000fe1  00000000  00000000  0000492b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000428  00000000  00000000  0000590c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b76  00000000  00000000  00005d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000012d3  00000000  00000000  000068aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00007b7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 09 01 	jmp	0x212	; 0x212 <__vector_1>
   8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
   c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  48:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  4c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  50:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
  64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000068 <__ctors_start>:
  68:	7a 00       	.word	0x007a	; ????
  6a:	83 00       	.word	0x0083	; ????
  6c:	8e 01       	movw	r16, r28

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	11 e0       	ldi	r17, 0x01	; 1
  7c:	a0 e0       	ldi	r26, 0x00	; 0
  7e:	b1 e0       	ldi	r27, 0x01	; 1
  80:	e6 e1       	ldi	r30, 0x16	; 22
  82:	f5 e0       	ldi	r31, 0x05	; 5
  84:	02 c0       	rjmp	.+4      	; 0x8a <__do_copy_data+0x10>
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a0 30       	cpi	r26, 0x00	; 0
  8c:	b1 07       	cpc	r27, r17
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0xc>

00000090 <__do_clear_bss>:
  90:	21 e0       	ldi	r18, 0x01	; 1
  92:	a0 e0       	ldi	r26, 0x00	; 0
  94:	b1 e0       	ldi	r27, 0x01	; 1
  96:	01 c0       	rjmp	.+2      	; 0x9a <.do_clear_bss_start>

00000098 <.do_clear_bss_loop>:
  98:	1d 92       	st	X+, r1

0000009a <.do_clear_bss_start>:
  9a:	a2 39       	cpi	r26, 0x92	; 146
  9c:	b2 07       	cpc	r27, r18
  9e:	e1 f7       	brne	.-8      	; 0x98 <.do_clear_bss_loop>

000000a0 <__do_global_ctors>:
  a0:	10 e0       	ldi	r17, 0x00	; 0
  a2:	c7 e3       	ldi	r28, 0x37	; 55
  a4:	d0 e0       	ldi	r29, 0x00	; 0
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_global_ctors+0x10>
  a8:	21 97       	sbiw	r28, 0x01	; 1
  aa:	fe 01       	movw	r30, r28
  ac:	0e 94 83 02 	call	0x506	; 0x506 <__tablejump2__>
  b0:	c4 33       	cpi	r28, 0x34	; 52
  b2:	d1 07       	cpc	r29, r17
  b4:	c9 f7       	brne	.-14     	; 0xa8 <__do_global_ctors+0x8>
  b6:	0e 94 88 00 	call	0x110	; 0x110 <main>
  ba:	0c 94 89 02 	jmp	0x512	; 0x512 <_exit>

000000be <__bad_interrupt>:
  be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <_ZN7DCMotorC1Ev>:
#include "DCMotor.h"
// CCMotor Class コンストラクタ
DCMotor::DCMotor(){
	level = 0;
  c2:	fc 01       	movw	r30, r24
  c4:	10 82       	st	Z, r1
	DDRB |= 0b00000010;							// OC1Aを出力ポートに設定
  c6:	21 9a       	sbi	0x04, 1	; 4
	TCCR1A |= 0b10000011;						// 高速PWM動作
  c8:	e0 e8       	ldi	r30, 0x80	; 128
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	83 68       	ori	r24, 0x83	; 131
  d0:	80 83       	st	Z, r24
	TCCR1B = 0b00001100;						// 8分周
  d2:	8c e0       	ldi	r24, 0x0C	; 12
  d4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	OCR1A = 100;									// 初期値duty4%に設定
  d8:	84 e6       	ldi	r24, 0x64	; 100
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  e0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  e4:	08 95       	ret

000000e6 <_ZN5DHT11C1Ev>:
/* #001     2021/01/09 温度を実数で保持するよう修正				荒金匡徳		*/
/****************************************************************************/
#include	"DHT11.h"

// コンストラクタ
DHT11::DHT11(void){
  e6:	fc 01       	movw	r30, r24
	this->humidity_H = this->humidity_L = this->temperature_H = this->temperature_L = 0xFF;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	85 83       	std	Z+5, r24	; 0x05
  ec:	84 83       	std	Z+4, r24	; 0x04
  ee:	87 83       	std	Z+7, r24	; 0x07
  f0:	86 83       	std	Z+6, r24	; 0x06
  f2:	08 95       	ret

000000f4 <_GLOBAL__sub_I_TandH>:
#include "FanControl.h"
#include "DHT11.h"
#include "DCMotor.h"


DHT11 TandH;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	0e 94 73 00 	call	0xe6	; 0xe6 <_ZN5DHT11C1Ev>
DCMotor DCM;
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	0e 94 61 00 	call	0xc2	; 0xc2 <_ZN7DCMotorC1Ev>
 104:	08 95       	ret

00000106 <_GLOBAL__sub_I_disp>:
 *
 * Created: 2021/02/01 19:09:40
 *  Author: MorimotoYuma
 */ 
#include "FanDisplay.h"
TM1637Disp disp;
 106:	89 e0       	ldi	r24, 0x09	; 9
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	0e 94 97 01 	call	0x32e	; 0x32e <_ZN10TM1637DispC1Ev>
 10e:	08 95       	ret

00000110 <main>:

#include "SwingControl.h"
#include "TM1637Disp.h"


int main(void) {
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	ca 58       	subi	r28, 0x8A	; 138
 11a:	d1 09       	sbc	r29, r1
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
	UCHR dispData[4] = {10, 10, 10, 10}; // 初期値
 126:	8a e0       	ldi	r24, 0x0A	; 10
 128:	89 83       	std	Y+1, r24	; 0x01
 12a:	8a 83       	std	Y+2, r24	; 0x02
 12c:	8b 83       	std	Y+3, r24	; 0x03
 12e:	8c 83       	std	Y+4, r24	; 0x04
	TM1637Disp disp;
 130:	ce 01       	movw	r24, r28
 132:	05 96       	adiw	r24, 0x05	; 5
 134:	0e 94 97 01 	call	0x32e	; 0x32e <_ZN10TM1637DispC1Ev>
	SwingControl SC;
 138:	ce 01       	movw	r24, r28
 13a:	87 57       	subi	r24, 0x77	; 119
 13c:	9f 4f       	sbci	r25, 0xFF	; 255
 13e:	0e 94 40 01 	call	0x280	; 0x280 <_ZN12SwingControlC1Ev>
	sei();
 142:	78 94       	sei
	while(1){
		SC.angleRefresh();
 144:	ce 01       	movw	r24, r28
 146:	87 57       	subi	r24, 0x77	; 119
 148:	9f 4f       	sbci	r25, 0xFF	; 255
 14a:	0e 94 43 01 	call	0x286	; 0x286 <_ZN12SwingControl12angleRefreshEv>
		dispData[3] = SC.getSwingLevel();
 14e:	ce 01       	movw	r24, r28
 150:	87 57       	subi	r24, 0x77	; 119
 152:	9f 4f       	sbci	r25, 0xFF	; 255
 154:	0e 94 8b 01 	call	0x316	; 0x316 <_ZN12SwingControl13getSwingLevelEv>
 158:	8c 83       	std	Y+4, r24	; 0x04
		disp.numDisp(dispData);
 15a:	be 01       	movw	r22, r28
 15c:	6f 5f       	subi	r22, 0xFF	; 255
 15e:	7f 4f       	sbci	r23, 0xFF	; 255
 160:	ce 01       	movw	r24, r28
 162:	05 96       	adiw	r24, 0x05	; 5
 164:	0e 94 35 02 	call	0x46a	; 0x46a <_ZN10TM1637Disp7numDispEPh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	2f ef       	ldi	r18, 0xFF	; 255
 16a:	83 ed       	ldi	r24, 0xD3	; 211
 16c:	90 e3       	ldi	r25, 0x30	; 48
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x5e>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x68>
 178:	00 00       	nop
 17a:	e4 cf       	rjmp	.-56     	; 0x144 <main+0x34>

0000017c <_ZN6PushSWC1Ev>:
/* #000		2021/01/17 初版										荒金匡德		*/
/****************************************************************************/
#include "PushSW.h"

PushSW::PushSW(void){
	CHK_PORT |= CHK_BIT;			// Pull UP
 17c:	4c 9a       	sbi	0x09, 4	; 9
	CHK_DDR &= NCHK_BIT;			// SW Port を入力に設定
 17e:	54 98       	cbi	0x0a, 4	; 10
	this->swState = SW_OFF;			// SW の初期状態をSW_OFFに設定
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	fc 01       	movw	r30, r24
 186:	31 83       	std	Z+1, r19	; 0x01
 188:	20 83       	st	Z, r18
 18a:	08 95       	ret

0000018c <_ZN6PushSW10getSwStateEv>:
/*			   SW_OFF(1)	:　スイッチOFF状態					*/
/*			   SW_IND(-1)	:　スイッチ状態不明					*/
/****************************************************************/
int		PushSW::getSwState(void){
	int	res = SW_IND;								// スイッチ状態（初期値は不明にしておく）
	UCHR	portCondition = (CHK_PORT & CHK_BIT);	// PORT状態保存
 18c:	29 b1       	in	r18, 0x09	; 9
 18e:	20 71       	andi	r18, 0x10	; 16
 190:	3f ef       	ldi	r19, 0xFF	; 255
 192:	89 ef       	ldi	r24, 0xF9	; 249
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	31 50       	subi	r19, 0x01	; 1
 198:	80 40       	sbci	r24, 0x00	; 0
 19a:	90 40       	sbci	r25, 0x00	; 0
 19c:	e1 f7       	brne	.-8      	; 0x196 <_ZN6PushSW10getSwStateEv+0xa>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <_ZN6PushSW10getSwStateEv+0x14>
 1a0:	00 00       	nop
	_delay_ms(CHATT_TIM);							// チャタリングチェックディレイ
	if( portCondition == (CHK_PORT & CHK_BIT)){		// 再度PORT状態が同じなら,PORT状態確定
 1a2:	89 b1       	in	r24, 0x09	; 9
 1a4:	42 2f       	mov	r20, r18
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	80 71       	andi	r24, 0x10	; 16
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	48 17       	cp	r20, r24
 1ae:	59 07       	cpc	r21, r25
 1b0:	31 f4       	brne	.+12     	; 0x1be <_ZN6PushSW10getSwStateEv+0x32>
		if( portCondition == CHK_BIT){				// PORTがHなら，
			res = SW_OFF;							// SW = OFF
		} else{										// PORTがLなら，
			res = SW_ON;							// SW = ON
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	20 31       	cpi	r18, 0x10	; 16
 1b8:	e9 f0       	breq	.+58     	; 0x1f4 <_ZN6PushSW10getSwStateEv+0x68>
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret
		}
	} else {										// ディレイ中にポート状態が変わった場合
		portCondition ^= CHK_BIT;					// 前回のPORT状態の反転値を現在の状態にする
 1be:	80 e1       	ldi	r24, 0x10	; 16
 1c0:	28 27       	eor	r18, r24
 1c2:	3f ef       	ldi	r19, 0xFF	; 255
 1c4:	89 ef       	ldi	r24, 0xF9	; 249
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	31 50       	subi	r19, 0x01	; 1
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <_ZN6PushSW10getSwStateEv+0x3c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <_ZN6PushSW10getSwStateEv+0x46>
 1d2:	00 00       	nop
		_delay_ms(CHATT_TIM);						// 再度チャタリングチェックディレイ
		if( portCondition == (CHK_PORT & CHK_BIT)){	// 再度PORT状態が同じなら，PORT状態確定
 1d4:	89 b1       	in	r24, 0x09	; 9
 1d6:	42 2f       	mov	r20, r18
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	80 71       	andi	r24, 0x10	; 16
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	48 17       	cp	r20, r24
 1e0:	59 07       	cpc	r21, r25
 1e2:	31 f4       	brne	.+12     	; 0x1f0 <_ZN6PushSW10getSwStateEv+0x64>
	_delay_ms(CHATT_TIM);							// チャタリングチェックディレイ
	if( portCondition == (CHK_PORT & CHK_BIT)){		// 再度PORT状態が同じなら,PORT状態確定
		if( portCondition == CHK_BIT){				// PORTがHなら，
			res = SW_OFF;							// SW = OFF
		} else{										// PORTがLなら，
			res = SW_ON;							// SW = ON
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	20 31       	cpi	r18, 0x10	; 16
 1ea:	21 f0       	breq	.+8      	; 0x1f4 <_ZN6PushSW10getSwStateEv+0x68>
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	08 95       	ret
/*		戻り値：SW_ON(0)		:　スイッチON状態						*/
/*			   SW_OFF(1)	:　スイッチOFF状態					*/
/*			   SW_IND(-1)	:　スイッチ状態不明					*/
/****************************************************************/
int		PushSW::getSwState(void){
	int	res = SW_IND;								// スイッチ状態（初期値は不明にしておく）
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	9f ef       	ldi	r25, 0xFF	; 255
				res = SW_ON;						// SW = ON
			}
		}
	}
	return res;										// PORT状態を返す．
}
 1f4:	08 95       	ret

000001f6 <_ZN6PushSW9waitSwOffEv>:
/* void waitSwOff(void)											*/
/* スイッチがOFF状態になるまで待つ（OFF状態になったら本関数を抜ける	*/
/****************************************************************/
void	PushSW::waitSwOff( void){
	while(1){
		while((CHK_PORT & CHK_BIT) == 0);
 1f6:	4c 9b       	sbis	0x09, 4	; 9
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <_ZN6PushSW9waitSwOffEv>
 1fa:	2f ef       	ldi	r18, 0xFF	; 255
 1fc:	89 ef       	ldi	r24, 0xF9	; 249
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <_ZN6PushSW9waitSwOffEv+0xa>
 208:	00 c0       	rjmp	.+0      	; 0x20a <_ZN6PushSW9waitSwOffEv+0x14>
 20a:	00 00       	nop
		_delay_ms(CHATT_TIM);
		if((CHK_PORT & CHK_BIT) != 0 ){
 20c:	4c 9b       	sbis	0x09, 4	; 9
 20e:	f3 cf       	rjmp	.-26     	; 0x1f6 <_ZN6PushSW9waitSwOffEv>
			break;
		}
	}
}
 210:	08 95       	ret

00000212 <__vector_1>:
	dspl = 0;						// 読み終わった変位情報をクリア
	sei();							// 割込み許可
	return	displacement;			// 取得したエンコーダ変位を戻す
}
/* INT0 割込み処理												*/
ISR( INT0_vect){					// ENC_A のダウンエッジで割込み発生
 212:	1f 92       	push	r1
 214:	0f 92       	push	r0
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	0f 92       	push	r0
 21a:	11 24       	eor	r1, r1
 21c:	8f 93       	push	r24
 21e:	9f 93       	push	r25
	dspl = 1;						// 共有メモリに右回りを設定
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <dspl+0x1>
 228:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <dspl>
	if( (PIND & 0b00001000) == 0){	// ENC_B が HIGH なら左回り
 22c:	4b 99       	sbic	0x09, 3	; 9
 22e:	06 c0       	rjmp	.+12     	; 0x23c <__vector_1+0x2a>
		dspl = -1;					// 共有メモリの左周りを設定
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	9f ef       	ldi	r25, 0xFF	; 255
 234:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <dspl+0x1>
 238:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <dspl>
	}
}
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <_ZN10ServoMotorC1Ev>:
#include "ServoMotor.h"

// コンストラクタ
ServoMotor::ServoMotor(void){
	DDRB |= 0b00000100;				// PD6を出力に設定
 24a:	22 9a       	sbi	0x04, 2	; 4
	TCCR1A |= 0b00100011;			// OC0A 10ビット高速PWM動作
 24c:	e0 e8       	ldi	r30, 0x80	; 128
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	83 62       	ori	r24, 0x23	; 35
 254:	80 83       	st	Z, r24
	TCCR1B = 0b00001100;			// 分周比256
 256:	8c e0       	ldi	r24, 0x0C	; 12
 258:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	OCR1B = 95;						// モータ角度をセンタに指定
 25c:	8f e5       	ldi	r24, 0x5F	; 95
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 264:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 268:	08 95       	ret

0000026a <_ZN10ServoMotor8setAngleEh>:

void	ServoMotor::setAngle(UCHR angle){
	if( angle >130){				// サーボモータ保護
		angle = 130;
	}
	OCR1B = (USHRT)angle + 30;
 26a:	63 38       	cpi	r22, 0x83	; 131
 26c:	08 f0       	brcs	.+2      	; 0x270 <_ZN10ServoMotor8setAngleEh+0x6>
 26e:	62 e8       	ldi	r22, 0x82	; 130
 270:	70 e0       	ldi	r23, 0x00	; 0
 272:	62 5e       	subi	r22, 0xE2	; 226
 274:	7f 4f       	sbci	r23, 0xFF	; 255
 276:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 27a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
 27e:	08 95       	ret

00000280 <_ZN12SwingControlC1Ev>:

PushSW sw;
ServoMotor sm;

SwingControl::SwingControl(){ // 初期値
	this->swingLevel = 0;
 280:	fc 01       	movw	r30, r24
 282:	10 82       	st	Z, r1
 284:	08 95       	ret

00000286 <_ZN12SwingControl12angleRefreshEv>:
}

void SwingControl::angleRefresh(void){
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	ec 01       	movw	r28, r24
	UCHR s = 1; // 1-加算, -1-減算
	if(0 == sw.getSwState()){ // スイッチで判別する
 28c:	80 e9       	ldi	r24, 0x90	; 144
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN6PushSW10getSwStateEv>
 294:	89 2b       	or	r24, r25
 296:	61 f4       	brne	.+24     	; 0x2b0 <_ZN12SwingControl12angleRefreshEv+0x2a>
		sw.waitSwOff();
 298:	80 e9       	ldi	r24, 0x90	; 144
 29a:	91 e0       	ldi	r25, 0x01	; 1
 29c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_ZN6PushSW9waitSwOffEv>
		this->swingLevel ++;
 2a0:	88 81       	ld	r24, Y
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
		if(4 == this->swingLevel) this->swingLevel = 0;
 2a4:	84 30       	cpi	r24, 0x04	; 4
 2a6:	11 f0       	breq	.+4      	; 0x2ac <_ZN12SwingControl12angleRefreshEv+0x26>

void SwingControl::angleRefresh(void){
	UCHR s = 1; // 1-加算, -1-減算
	if(0 == sw.getSwState()){ // スイッチで判別する
		sw.waitSwOff();
		this->swingLevel ++;
 2a8:	88 83       	st	Y, r24
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <_ZN12SwingControl12angleRefreshEv+0x2a>
		if(4 == this->swingLevel) this->swingLevel = 0;
 2ac:	18 82       	st	Y, r1
 2ae:	03 c0       	rjmp	.+6      	; 0x2b6 <_ZN12SwingControl12angleRefreshEv+0x30>
	}
	
	if(0 == this->swingLevel){
 2b0:	88 81       	ld	r24, Y
 2b2:	81 11       	cpse	r24, r1
 2b4:	04 c0       	rjmp	.+8      	; 0x2be <_ZN12SwingControl12angleRefreshEv+0x38>
		this->swingAngle = 90; // 中央
 2b6:	8a e5       	ldi	r24, 0x5A	; 90
 2b8:	89 83       	std	Y+1, r24	; 0x01
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	16 c0       	rjmp	.+44     	; 0x2ea <_ZN12SwingControl12angleRefreshEv+0x64>
	}
	if(1 == this->swingLevel){ // 60 ~ 120°
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	49 f4       	brne	.+18     	; 0x2d4 <_ZN12SwingControl12angleRefreshEv+0x4e>
		if(60 >= this->swingAngle) s = 1;
		if(120 <= this->swingAngle) s = -1;
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	88 37       	cpi	r24, 0x78	; 120
 2c6:	10 f0       	brcs	.+4      	; 0x2cc <_ZN12SwingControl12angleRefreshEv+0x46>
 2c8:	9f ef       	ldi	r25, 0xFF	; 255
 2ca:	01 c0       	rjmp	.+2      	; 0x2ce <_ZN12SwingControl12angleRefreshEv+0x48>
 2cc:	91 e0       	ldi	r25, 0x01	; 1
		this->swingAngle += s;
 2ce:	89 0f       	add	r24, r25
 2d0:	89 83       	std	Y+1, r24	; 0x01
 2d2:	19 c0       	rjmp	.+50     	; 0x306 <_ZN12SwingControl12angleRefreshEv+0x80>
	}
	if(2 == this->swingLevel){ // 30 ~ 150°
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	49 f4       	brne	.+18     	; 0x2ea <_ZN12SwingControl12angleRefreshEv+0x64>
		if(30 >= this->swingAngle) s = 1;
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
		if(150 <= this->swingAngle) s = -1;
 2da:	86 39       	cpi	r24, 0x96	; 150
 2dc:	10 f0       	brcs	.+4      	; 0x2e2 <_ZN12SwingControl12angleRefreshEv+0x5c>
 2de:	9f ef       	ldi	r25, 0xFF	; 255
 2e0:	01 c0       	rjmp	.+2      	; 0x2e4 <_ZN12SwingControl12angleRefreshEv+0x5e>
 2e2:	91 e0       	ldi	r25, 0x01	; 1
		this->swingAngle += s;
 2e4:	89 0f       	add	r24, r25
 2e6:	89 83       	std	Y+1, r24	; 0x01
 2e8:	0e c0       	rjmp	.+28     	; 0x306 <_ZN12SwingControl12angleRefreshEv+0x80>
	}
	if(3 == this->swingLevel){ //  0 ~ 180°
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	61 f4       	brne	.+24     	; 0x306 <_ZN12SwingControl12angleRefreshEv+0x80>
		if(0 >= this->swingAngle) s = 1;
 2ee:	89 81       	ldd	r24, Y+1	; 0x01
 2f0:	88 23       	and	r24, r24
 2f2:	21 f0       	breq	.+8      	; 0x2fc <_ZN12SwingControl12angleRefreshEv+0x76>
		if(180 <= this->swingAngle) s = -1;
 2f4:	84 3b       	cpi	r24, 0xB4	; 180
 2f6:	20 f0       	brcs	.+8      	; 0x300 <_ZN12SwingControl12angleRefreshEv+0x7a>
 2f8:	9f ef       	ldi	r25, 0xFF	; 255
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <_ZN12SwingControl12angleRefreshEv+0x7c>
		if(30 >= this->swingAngle) s = 1;
		if(150 <= this->swingAngle) s = -1;
		this->swingAngle += s;
	}
	if(3 == this->swingLevel){ //  0 ~ 180°
		if(0 >= this->swingAngle) s = 1;
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <_ZN12SwingControl12angleRefreshEv+0x7c>
 300:	91 e0       	ldi	r25, 0x01	; 1
		if(180 <= this->swingAngle) s = -1;
		this->swingAngle += s;
 302:	89 0f       	add	r24, r25
 304:	89 83       	std	Y+1, r24	; 0x01
	}
	sm.setAngle(this->swingAngle);
 306:	69 81       	ldd	r22, Y+1	; 0x01
 308:	8f e8       	ldi	r24, 0x8F	; 143
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 35 01 	call	0x26a	; 0x26a <_ZN10ServoMotor8setAngleEh>
}
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <_ZN12SwingControl13getSwingLevelEv>:
UCHR SwingControl::getSwingLevel(void){ // 首振りの設定値を返す　表示に使う
	return this->swingLevel;
 316:	fc 01       	movw	r30, r24
 318:	80 81       	ld	r24, Z
 31a:	08 95       	ret

0000031c <_GLOBAL__sub_I_sw>:

#include "SwingControl.h"
#include "PushSW.h"
#include "ServoMotor.h"

PushSW sw;
 31c:	80 e9       	ldi	r24, 0x90	; 144
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 be 00 	call	0x17c	; 0x17c <_ZN6PushSWC1Ev>
ServoMotor sm;
 324:	8f e8       	ldi	r24, 0x8F	; 143
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 25 01 	call	0x24a	; 0x24a <_ZN10ServoMotorC1Ev>
 32c:	08 95       	ret

0000032e <_ZN10TM1637DispC1Ev>:
	UCHR *dest = &(this->segPattern[0]);	// 表示パターン格納先先頭アドレス
	for( int i=0; i<128; i++){				// 最大128Byte読み込む
		if( *ptr == 0xFF){					// データ終了なら読込を完了させる
			break;
		}
		*dest++ = *ptr++;					// データを1Byte コピーする
 32e:	fc 01       	movw	r30, r24
 330:	84 b1       	in	r24, 0x04	; 4
 332:	81 61       	ori	r24, 0x11	; 17
 334:	84 b9       	out	0x04, r24	; 4
 336:	8f e3       	ldi	r24, 0x3F	; 63
 338:	80 83       	st	Z, r24
 33a:	86 e0       	ldi	r24, 0x06	; 6
 33c:	81 83       	std	Z+1, r24	; 0x01
 33e:	8b e5       	ldi	r24, 0x5B	; 91
 340:	82 83       	std	Z+2, r24	; 0x02
 342:	8f e4       	ldi	r24, 0x4F	; 79
 344:	83 83       	std	Z+3, r24	; 0x03
 346:	86 e6       	ldi	r24, 0x66	; 102
 348:	84 83       	std	Z+4, r24	; 0x04
 34a:	8d e6       	ldi	r24, 0x6D	; 109
 34c:	85 83       	std	Z+5, r24	; 0x05
 34e:	8d e7       	ldi	r24, 0x7D	; 125
 350:	86 83       	std	Z+6, r24	; 0x06
 352:	87 e0       	ldi	r24, 0x07	; 7
 354:	87 83       	std	Z+7, r24	; 0x07
 356:	8f e7       	ldi	r24, 0x7F	; 127
 358:	80 87       	std	Z+8, r24	; 0x08
 35a:	8f e6       	ldi	r24, 0x6F	; 111
 35c:	81 87       	std	Z+9, r24	; 0x09
 35e:	12 86       	std	Z+10, r1	; 0x0a
 360:	08 95       	ret

00000362 <_ZN10TM1637Disp9Start_bitEv>:

///////////////////////////////////////////////////////////
//		START Bit 送信関数
///////////////////////////////////////////////////////////
void	TM1637Disp::Start_bit( void){
	CLK_H;											// CLKをHIGH
 362:	83 b1       	in	r24, 0x03	; 3
 364:	81 60       	ori	r24, 0x01	; 1
 366:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 368:	8f e8       	ldi	r24, 0x8F	; 143
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <_ZN10TM1637Disp9Start_bitEv+0xa>
 370:	00 c0       	rjmp	.+0      	; 0x372 <_ZN10TM1637Disp9Start_bitEv+0x10>
 372:	00 00       	nop
	_delay_us(DLY);
	DIO_H;											// DIOをHIGH
 374:	83 b1       	in	r24, 0x03	; 3
 376:	80 61       	ori	r24, 0x10	; 16
 378:	85 b9       	out	0x05, r24	; 5
 37a:	8f e8       	ldi	r24, 0x8F	; 143
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <_ZN10TM1637Disp9Start_bitEv+0x1c>
 382:	00 c0       	rjmp	.+0      	; 0x384 <_ZN10TM1637Disp9Start_bitEv+0x22>
 384:	00 00       	nop
	_delay_us(DLY);
	DIO_L;											// DIOをLOW
 386:	83 b1       	in	r24, 0x03	; 3
 388:	8f 7e       	andi	r24, 0xEF	; 239
 38a:	85 b9       	out	0x05, r24	; 5
 38c:	8f e8       	ldi	r24, 0x8F	; 143
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <_ZN10TM1637Disp9Start_bitEv+0x2e>
 394:	00 c0       	rjmp	.+0      	; 0x396 <_ZN10TM1637Disp9Start_bitEv+0x34>
 396:	00 00       	nop
 398:	08 95       	ret

0000039a <_ZN10TM1637Disp8Stop_bitEv>:

///////////////////////////////////////////////////////////
//		STOP Bit 送信関数
///////////////////////////////////////////////////////////
void	TM1637Disp::Stop_bit( void){
	DIO_L;											// DIOをLOW
 39a:	83 b1       	in	r24, 0x03	; 3
 39c:	8f 7e       	andi	r24, 0xEF	; 239
 39e:	85 b9       	out	0x05, r24	; 5
 3a0:	8f e8       	ldi	r24, 0x8F	; 143
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	01 97       	sbiw	r24, 0x01	; 1
 3a6:	f1 f7       	brne	.-4      	; 0x3a4 <_ZN10TM1637Disp8Stop_bitEv+0xa>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <_ZN10TM1637Disp8Stop_bitEv+0x10>
 3aa:	00 00       	nop
	_delay_us(DLY);
	CLK_H;											// CLKをHIGH
 3ac:	83 b1       	in	r24, 0x03	; 3
 3ae:	81 60       	ori	r24, 0x01	; 1
 3b0:	85 b9       	out	0x05, r24	; 5
 3b2:	8f e8       	ldi	r24, 0x8F	; 143
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	f1 f7       	brne	.-4      	; 0x3b6 <_ZN10TM1637Disp8Stop_bitEv+0x1c>
 3ba:	00 c0       	rjmp	.+0      	; 0x3bc <_ZN10TM1637Disp8Stop_bitEv+0x22>
 3bc:	00 00       	nop
	_delay_us(DLY);
	DIO_H;											// DIOをHIGH
 3be:	83 b1       	in	r24, 0x03	; 3
 3c0:	80 61       	ori	r24, 0x10	; 16
 3c2:	85 b9       	out	0x05, r24	; 5
 3c4:	8f e8       	ldi	r24, 0x8F	; 143
 3c6:	91 e0       	ldi	r25, 0x01	; 1
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	f1 f7       	brne	.-4      	; 0x3c8 <_ZN10TM1637Disp8Stop_bitEv+0x2e>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <_ZN10TM1637Disp8Stop_bitEv+0x34>
 3ce:	00 00       	nop
 3d0:	08 95       	ret

000003d2 <_ZN10TM1637Disp4sendEh>:
}

///////////////////////////////////////////////////////////
//		Byte data 送信関数
///////////////////////////////////////////////////////////
void	TM1637Disp::send( UCHR	data){
 3d2:	28 e0       	ldi	r18, 0x08	; 8
 3d4:	30 e0       	ldi	r19, 0x00	; 0
	for( int i=0; i<8; i++){						// 8Bitデータ送出なので8回Loopする．
		CLK_L;										// CLKにLOWを出力
 3d6:	83 b1       	in	r24, 0x03	; 3
 3d8:	8e 7f       	andi	r24, 0xFE	; 254
 3da:	85 b9       	out	0x05, r24	; 5
 3dc:	8f e8       	ldi	r24, 0x8F	; 143
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <_ZN10TM1637Disp4sendEh+0xe>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <_ZN10TM1637Disp4sendEh+0x14>
 3e6:	00 00       	nop
		_delay_us(DLY);
		if( (data & 0x01) == 0){					// 出力データが0の時
 3e8:	60 fd       	sbrc	r22, 0
 3ea:	04 c0       	rjmp	.+8      	; 0x3f4 <_ZN10TM1637Disp4sendEh+0x22>
			DIO_L;									//　 DIOにLOWを出力
 3ec:	83 b1       	in	r24, 0x03	; 3
 3ee:	8f 7e       	andi	r24, 0xEF	; 239
 3f0:	85 b9       	out	0x05, r24	; 5
 3f2:	03 c0       	rjmp	.+6      	; 0x3fa <_ZN10TM1637Disp4sendEh+0x28>
		} else{										// 出力データが1の時
			DIO_H;									// 　DIOにHIGHを出力
 3f4:	83 b1       	in	r24, 0x03	; 3
 3f6:	80 61       	ori	r24, 0x10	; 16
 3f8:	85 b9       	out	0x05, r24	; 5
 3fa:	8f e8       	ldi	r24, 0x8F	; 143
 3fc:	91 e0       	ldi	r25, 0x01	; 1
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	f1 f7       	brne	.-4      	; 0x3fe <_ZN10TM1637Disp4sendEh+0x2c>
 402:	00 c0       	rjmp	.+0      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 404:	00 00       	nop
		}
		_delay_us(DLY);
		CLK_H;										// CLKにHIGHを出力
 406:	83 b1       	in	r24, 0x03	; 3
 408:	81 60       	ori	r24, 0x01	; 1
 40a:	85 b9       	out	0x05, r24	; 5
 40c:	8f e8       	ldi	r24, 0x8F	; 143
 40e:	91 e0       	ldi	r25, 0x01	; 1
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	f1 f7       	brne	.-4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 414:	00 c0       	rjmp	.+0      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 416:	00 00       	nop
		_delay_us(DLY);
		data >>= 1;									// 出力データを1ビット右シフト
 418:	66 95       	lsr	r22
 41a:	21 50       	subi	r18, 0x01	; 1
 41c:	31 09       	sbc	r19, r1

///////////////////////////////////////////////////////////
//		Byte data 送信関数
///////////////////////////////////////////////////////////
void	TM1637Disp::send( UCHR	data){
	for( int i=0; i<8; i++){						// 8Bitデータ送出なので8回Loopする．
 41e:	d9 f6       	brne	.-74     	; 0x3d6 <_ZN10TM1637Disp4sendEh+0x4>
		CLK_H;										// CLKにHIGHを出力
		_delay_us(DLY);
		data >>= 1;									// 出力データを1ビット右シフト
	}
	// ACK待ち
	CLK_L;
 420:	83 b1       	in	r24, 0x03	; 3
 422:	8e 7f       	andi	r24, 0xFE	; 254
 424:	85 b9       	out	0x05, r24	; 5
 426:	8f e8       	ldi	r24, 0x8F	; 143
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	01 97       	sbiw	r24, 0x01	; 1
 42c:	f1 f7       	brne	.-4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42e:	00 c0       	rjmp	.+0      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 430:	00 00       	nop
	_delay_us(DLY);
	// CLKをHIGHにしてACK解除
	CLK_H;											// CLKにHIGHを出力
 432:	83 b1       	in	r24, 0x03	; 3
 434:	81 60       	ori	r24, 0x01	; 1
 436:	85 b9       	out	0x05, r24	; 5
 438:	8f e8       	ldi	r24, 0x8F	; 143
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	01 97       	sbiw	r24, 0x01	; 1
 43e:	f1 f7       	brne	.-4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 442:	00 00       	nop
	_delay_us(DLY);
	DIO_L;											// DIOにLOWを出力
 444:	83 b1       	in	r24, 0x03	; 3
 446:	8f 7e       	andi	r24, 0xEF	; 239
 448:	85 b9       	out	0x05, r24	; 5
 44a:	8f e8       	ldi	r24, 0x8F	; 143
 44c:	91 e0       	ldi	r25, 0x01	; 1
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 454:	00 00       	nop
	_delay_us(DLY);
	CLK_L;											// CLKにLOWを出力
 456:	83 b1       	in	r24, 0x03	; 3
 458:	8e 7f       	andi	r24, 0xFE	; 254
 45a:	85 b9       	out	0x05, r24	; 5
 45c:	8f e8       	ldi	r24, 0x8F	; 143
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 464:	00 c0       	rjmp	.+0      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 466:	00 00       	nop
 468:	08 95       	ret

0000046a <_ZN10TM1637Disp7numDispEPh>:
//         4桁7セグメントLEDに表示する．
//         但し，上記表示文字に.を付加する場合は，コードに0x80を
//         加算する．
//
///////////////////////////////////////////////////////////
void	TM1637Disp::numDisp( UCHR *ptr){
 46a:	ef 92       	push	r14
 46c:	ff 92       	push	r15
 46e:	0f 93       	push	r16
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	ec 01       	movw	r28, r24
 478:	06 2f       	mov	r16, r22
 47a:	17 2f       	mov	r17, r23

	TM_DDR |= CLK|DIO;								// CLKポートDIOポートを出力に設定
 47c:	84 b1       	in	r24, 0x04	; 4
 47e:	81 61       	ori	r24, 0x11	; 17
 480:	84 b9       	out	0x04, r24	; 4
	Start_bit();									// Start bit 送信
 482:	ce 01       	movw	r24, r28
 484:	0e 94 b1 01 	call	0x362	; 0x362 <_ZN10TM1637Disp9Start_bitEv>
	send(MODE);										// モード送信
 488:	64 e4       	ldi	r22, 0x44	; 68
 48a:	ce 01       	movw	r24, r28
 48c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN10TM1637Disp4sendEh>
	Stop_bit();										// Stop bit 送信
 490:	ce 01       	movw	r24, r28
 492:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN10TM1637Disp8Stop_bitEv>
 496:	e0 2e       	mov	r14, r16
 498:	f1 2e       	mov	r15, r17
 49a:	10 ec       	ldi	r17, 0xC0	; 192

	for( int i = 0; i < 4; i++){					// 4桁分のLoop
		Start_bit();								// START Bit 送信
 49c:	ce 01       	movw	r24, r28
 49e:	0e 94 b1 01 	call	0x362	; 0x362 <_ZN10TM1637Disp9Start_bitEv>
		send(ADDR + i);								// 表示エリアのアドレス送信
 4a2:	61 2f       	mov	r22, r17
 4a4:	ce 01       	movw	r24, r28
 4a6:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN10TM1637Disp4sendEh>
		if( *ptr >= 0x80){							// ドットを付加する場合
 4aa:	f7 01       	movw	r30, r14
 4ac:	81 91       	ld	r24, Z+
 4ae:	7f 01       	movw	r14, r30
 4b0:	88 23       	and	r24, r24
 4b2:	5c f4       	brge	.+22     	; 0x4ca <_ZN10TM1637Disp7numDispEPh+0x60>
			send(this->segPattern[(int)(*ptr-0x80)]|0x80);// ドットのセグメントを付加した情報を送信
 4b4:	fe 01       	movw	r30, r28
 4b6:	e8 0f       	add	r30, r24
 4b8:	f1 1d       	adc	r31, r1
 4ba:	e0 58       	subi	r30, 0x80	; 128
 4bc:	f1 09       	sbc	r31, r1
 4be:	60 81       	ld	r22, Z
 4c0:	60 68       	ori	r22, 0x80	; 128
 4c2:	ce 01       	movw	r24, r28
 4c4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN10TM1637Disp4sendEh>
 4c8:	07 c0       	rjmp	.+14     	; 0x4d8 <_ZN10TM1637Disp7numDispEPh+0x6e>
			} else {								// ドットを付加しない場合
			send(this->segPattern[(int)*ptr]);			// ドットなしの表示情報を送信
 4ca:	fe 01       	movw	r30, r28
 4cc:	e8 0f       	add	r30, r24
 4ce:	f1 1d       	adc	r31, r1
 4d0:	60 81       	ld	r22, Z
 4d2:	ce 01       	movw	r24, r28
 4d4:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN10TM1637Disp4sendEh>
		}
		Stop_bit();									// STOP Bit 送信
 4d8:	ce 01       	movw	r24, r28
 4da:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN10TM1637Disp8Stop_bitEv>
 4de:	1f 5f       	subi	r17, 0xFF	; 255
	TM_DDR |= CLK|DIO;								// CLKポートDIOポートを出力に設定
	Start_bit();									// Start bit 送信
	send(MODE);										// モード送信
	Stop_bit();										// Stop bit 送信

	for( int i = 0; i < 4; i++){					// 4桁分のLoop
 4e0:	14 3c       	cpi	r17, 0xC4	; 196
 4e2:	e1 f6       	brne	.-72     	; 0x49c <_ZN10TM1637Disp7numDispEPh+0x32>
		}
		Stop_bit();									// STOP Bit 送信
		ptr++;										// 表示桁を進める
	}

	Start_bit();									// STOP Bit 送信
 4e4:	ce 01       	movw	r24, r28
 4e6:	0e 94 b1 01 	call	0x362	; 0x362 <_ZN10TM1637Disp9Start_bitEv>
	send(DCNT);										// Display Control Command 送信
 4ea:	6f e8       	ldi	r22, 0x8F	; 143
 4ec:	ce 01       	movw	r24, r28
 4ee:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN10TM1637Disp4sendEh>
	Stop_bit();										// STOP Bit 送信
 4f2:	ce 01       	movw	r24, r28
 4f4:	0e 94 cd 01 	call	0x39a	; 0x39a <_ZN10TM1637Disp8Stop_bitEv>
}
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	1f 91       	pop	r17
 4fe:	0f 91       	pop	r16
 500:	ff 90       	pop	r15
 502:	ef 90       	pop	r14
 504:	08 95       	ret

00000506 <__tablejump2__>:
 506:	ee 0f       	add	r30, r30
 508:	ff 1f       	adc	r31, r31
 50a:	05 90       	lpm	r0, Z+
 50c:	f4 91       	lpm	r31, Z
 50e:	e0 2d       	mov	r30, r0
 510:	09 94       	ijmp

00000512 <_exit>:
 512:	f8 94       	cli

00000514 <__stop_program>:
 514:	ff cf       	rjmp	.-2      	; 0x514 <__stop_program>
