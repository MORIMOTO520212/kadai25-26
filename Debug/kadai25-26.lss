
kadai25-26.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000003be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001530  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b23  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d8  00000000  00000000  0000252b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00002d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063c  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b31  00000000  00000000  000034d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00004001  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 9b 00 	jmp	0x136	; 0x136 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 30       	cpi	r26, 0x02	; 2
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 a3 01 	jmp	0x346	; 0x346 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
	}else{
		return a;
	}
};

int main(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	c8 58       	subi	r28, 0x88	; 136
  b0:	d1 09       	sbc	r29, r1
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	f8 94       	cli
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	cd bf       	out	0x3d, r28	; 61
	// comp(a,b) - a と b に整数を入れると上位2桁の表示をする. 浮動小数点数を入れるとピリオドを付けて表示する.
	int a = 2;
	int b = 4;
	float c = 1.7;
	float d = 1.1;
	UCHR data[4] = {10, 10, 10, 10};
  bc:	8a e0       	ldi	r24, 0x0A	; 10
  be:	89 83       	std	Y+1, r24	; 0x01
  c0:	8a 83       	std	Y+2, r24	; 0x02
  c2:	8b 83       	std	Y+3, r24	; 0x03
  c4:	8c 83       	std	Y+4, r24	; 0x04
	TM1637Disp disp;
  c6:	ce 01       	movw	r24, r28
  c8:	05 96       	adiw	r24, 0x05	; 5
  ca:	0e 94 b7 00 	call	0x16e	; 0x16e <_ZN10TM1637DispC1Ev>
	while(1) {
		data[0] = a;
  ce:	68 94       	set
  d0:	dd 24       	eor	r13, r13
  d2:	d1 f8       	bld	r13, 1
		data[1] = b;
  d4:	14 e0       	ldi	r17, 0x04	; 4
		data[3] = comp(a,b);
		disp.numDisp(data);
		_delay_ms(1000);
		
		data[0] = (UCHR)comp(c,d) | 0x80;
  d6:	0f 2e       	mov	r0, r31
  d8:	f1 e8       	ldi	r31, 0x81	; 129
  da:	ef 2e       	mov	r14, r31
  dc:	f0 2d       	mov	r31, r0
		data[1] = (UCHR) (comp(c,d) * 10.0) % 10;
  de:	0f 2e       	mov	r0, r31
  e0:	f7 e0       	ldi	r31, 0x07	; 7
  e2:	ff 2e       	mov	r15, r31
  e4:	f0 2d       	mov	r31, r0
		data[3] = 10;
  e6:	0a e0       	ldi	r16, 0x0A	; 10
	float c = 1.7;
	float d = 1.1;
	UCHR data[4] = {10, 10, 10, 10};
	TM1637Disp disp;
	while(1) {
		data[0] = a;
  e8:	d9 82       	std	Y+1, r13	; 0x01
		data[1] = b;
  ea:	1a 83       	std	Y+2, r17	; 0x02
		data[3] = comp(a,b);
  ec:	1c 83       	std	Y+4, r17	; 0x04
		disp.numDisp(data);
  ee:	be 01       	movw	r22, r28
  f0:	6f 5f       	subi	r22, 0xFF	; 255
  f2:	7f 4f       	sbci	r23, 0xFF	; 255
  f4:	ce 01       	movw	r24, r28
  f6:	05 96       	adiw	r24, 0x05	; 5
  f8:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN10TM1637Disp7numDispEPh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	83 ed       	ldi	r24, 0xD3	; 211
 100:	90 e3       	ldi	r25, 0x30	; 48
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x5c>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x66>
 10c:	00 00       	nop
		_delay_ms(1000);
		
		data[0] = (UCHR)comp(c,d) | 0x80;
 10e:	e9 82       	std	Y+1, r14	; 0x01
		data[1] = (UCHR) (comp(c,d) * 10.0) % 10;
 110:	fa 82       	std	Y+2, r15	; 0x02
		data[3] = 10;
 112:	0c 83       	std	Y+4, r16	; 0x04
		disp.numDisp(data);
 114:	be 01       	movw	r22, r28
 116:	6f 5f       	subi	r22, 0xFF	; 255
 118:	7f 4f       	sbci	r23, 0xFF	; 255
 11a:	ce 01       	movw	r24, r28
 11c:	05 96       	adiw	r24, 0x05	; 5
 11e:	0e 94 55 01 	call	0x2aa	; 0x2aa <_ZN10TM1637Disp7numDispEPh>
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	83 ed       	ldi	r24, 0xD3	; 211
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x82>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x8c>
 132:	00 00       	nop
 134:	d9 cf       	rjmp	.-78     	; 0xe8 <main+0x42>

00000136 <__vector_1>:
	dspl = 0;						// 読み終わった変位情報をクリア
	sei();							// 割込み許可
	return	displacement;			// 取得したエンコーダ変位を戻す
}
/* INT0 割込み処理												*/
ISR( INT0_vect){					// ENC_A のダウンエッジで割込み発生
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
	dspl = 1;						// 共有メモリに右回りを設定
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 14c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	if( (PIND & 0b00001000) == 0){	// ENC_B が HIGH なら左回り
 150:	4b 99       	sbic	0x09, 3	; 9
 152:	06 c0       	rjmp	.+12     	; 0x160 <__vector_1+0x2a>
		dspl = -1;					// 共有メモリの左周りを設定
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	9f ef       	ldi	r25, 0xFF	; 255
 158:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 15c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
	}
}
 160:	9f 91       	pop	r25
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <_ZN10TM1637DispC1Ev>:
	UCHR *dest = &(this->segPattern[0]);	// 表示パターン格納先先頭アドレス
	for( int i=0; i<128; i++){				// 最大128Byte読み込む
		if( *ptr == 0xFF){					// データ終了なら読込を完了させる
			break;
		}
		*dest++ = *ptr++;					// データを1Byte コピーする
 16e:	fc 01       	movw	r30, r24
 170:	84 b1       	in	r24, 0x04	; 4
 172:	81 61       	ori	r24, 0x11	; 17
 174:	84 b9       	out	0x04, r24	; 4
 176:	8f e3       	ldi	r24, 0x3F	; 63
 178:	80 83       	st	Z, r24
 17a:	86 e0       	ldi	r24, 0x06	; 6
 17c:	81 83       	std	Z+1, r24	; 0x01
 17e:	8b e5       	ldi	r24, 0x5B	; 91
 180:	82 83       	std	Z+2, r24	; 0x02
 182:	8f e4       	ldi	r24, 0x4F	; 79
 184:	83 83       	std	Z+3, r24	; 0x03
 186:	86 e6       	ldi	r24, 0x66	; 102
 188:	84 83       	std	Z+4, r24	; 0x04
 18a:	8d e6       	ldi	r24, 0x6D	; 109
 18c:	85 83       	std	Z+5, r24	; 0x05
 18e:	8d e7       	ldi	r24, 0x7D	; 125
 190:	86 83       	std	Z+6, r24	; 0x06
 192:	87 e0       	ldi	r24, 0x07	; 7
 194:	87 83       	std	Z+7, r24	; 0x07
 196:	8f e7       	ldi	r24, 0x7F	; 127
 198:	80 87       	std	Z+8, r24	; 0x08
 19a:	8f e6       	ldi	r24, 0x6F	; 111
 19c:	81 87       	std	Z+9, r24	; 0x09
 19e:	12 86       	std	Z+10, r1	; 0x0a
 1a0:	08 95       	ret

000001a2 <_ZN10TM1637Disp9Start_bitEv>:

///////////////////////////////////////////////////////////
//		START Bit 送信関数
///////////////////////////////////////////////////////////
void	TM1637Disp::Start_bit( void){
	CLK_H;											// CLKをHIGH
 1a2:	83 b1       	in	r24, 0x03	; 3
 1a4:	81 60       	ori	r24, 0x01	; 1
 1a6:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	8f e8       	ldi	r24, 0x8F	; 143
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <_ZN10TM1637Disp9Start_bitEv+0xa>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <_ZN10TM1637Disp9Start_bitEv+0x10>
 1b2:	00 00       	nop
	_delay_us(DLY);
	DIO_H;											// DIOをHIGH
 1b4:	83 b1       	in	r24, 0x03	; 3
 1b6:	80 61       	ori	r24, 0x10	; 16
 1b8:	85 b9       	out	0x05, r24	; 5
 1ba:	8f e8       	ldi	r24, 0x8F	; 143
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <_ZN10TM1637Disp9Start_bitEv+0x1c>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <_ZN10TM1637Disp9Start_bitEv+0x22>
 1c4:	00 00       	nop
	_delay_us(DLY);
	DIO_L;											// DIOをLOW
 1c6:	83 b1       	in	r24, 0x03	; 3
 1c8:	8f 7e       	andi	r24, 0xEF	; 239
 1ca:	85 b9       	out	0x05, r24	; 5
 1cc:	8f e8       	ldi	r24, 0x8F	; 143
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <_ZN10TM1637Disp9Start_bitEv+0x2e>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_ZN10TM1637Disp9Start_bitEv+0x34>
 1d6:	00 00       	nop
 1d8:	08 95       	ret

000001da <_ZN10TM1637Disp8Stop_bitEv>:

///////////////////////////////////////////////////////////
//		STOP Bit 送信関数
///////////////////////////////////////////////////////////
void	TM1637Disp::Stop_bit( void){
	DIO_L;											// DIOをLOW
 1da:	83 b1       	in	r24, 0x03	; 3
 1dc:	8f 7e       	andi	r24, 0xEF	; 239
 1de:	85 b9       	out	0x05, r24	; 5
 1e0:	8f e8       	ldi	r24, 0x8F	; 143
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <_ZN10TM1637Disp8Stop_bitEv+0xa>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <_ZN10TM1637Disp8Stop_bitEv+0x10>
 1ea:	00 00       	nop
	_delay_us(DLY);
	CLK_H;											// CLKをHIGH
 1ec:	83 b1       	in	r24, 0x03	; 3
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	85 b9       	out	0x05, r24	; 5
 1f2:	8f e8       	ldi	r24, 0x8F	; 143
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <_ZN10TM1637Disp8Stop_bitEv+0x1c>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <_ZN10TM1637Disp8Stop_bitEv+0x22>
 1fc:	00 00       	nop
	_delay_us(DLY);
	DIO_H;											// DIOをHIGH
 1fe:	83 b1       	in	r24, 0x03	; 3
 200:	80 61       	ori	r24, 0x10	; 16
 202:	85 b9       	out	0x05, r24	; 5
 204:	8f e8       	ldi	r24, 0x8F	; 143
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <_ZN10TM1637Disp8Stop_bitEv+0x2e>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <_ZN10TM1637Disp8Stop_bitEv+0x34>
 20e:	00 00       	nop
 210:	08 95       	ret

00000212 <_ZN10TM1637Disp4sendEh>:
}

///////////////////////////////////////////////////////////
//		Byte data 送信関数
///////////////////////////////////////////////////////////
void	TM1637Disp::send( UCHR	data){
 212:	28 e0       	ldi	r18, 0x08	; 8
 214:	30 e0       	ldi	r19, 0x00	; 0
	for( int i=0; i<8; i++){						// 8Bitデータ送出なので8回Loopする．
		CLK_L;										// CLKにLOWを出力
 216:	83 b1       	in	r24, 0x03	; 3
 218:	8e 7f       	andi	r24, 0xFE	; 254
 21a:	85 b9       	out	0x05, r24	; 5
 21c:	8f e8       	ldi	r24, 0x8F	; 143
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <_ZN10TM1637Disp4sendEh+0xe>
 224:	00 c0       	rjmp	.+0      	; 0x226 <_ZN10TM1637Disp4sendEh+0x14>
 226:	00 00       	nop
		_delay_us(DLY);
		if( (data & 0x01) == 0){					// 出力データが0の時
 228:	60 fd       	sbrc	r22, 0
 22a:	04 c0       	rjmp	.+8      	; 0x234 <_ZN10TM1637Disp4sendEh+0x22>
			DIO_L;									//　 DIOにLOWを出力
 22c:	83 b1       	in	r24, 0x03	; 3
 22e:	8f 7e       	andi	r24, 0xEF	; 239
 230:	85 b9       	out	0x05, r24	; 5
 232:	03 c0       	rjmp	.+6      	; 0x23a <_ZN10TM1637Disp4sendEh+0x28>
		} else{										// 出力データが1の時
			DIO_H;									// 　DIOにHIGHを出力
 234:	83 b1       	in	r24, 0x03	; 3
 236:	80 61       	ori	r24, 0x10	; 16
 238:	85 b9       	out	0x05, r24	; 5
 23a:	8f e8       	ldi	r24, 0x8F	; 143
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <_ZN10TM1637Disp4sendEh+0x2c>
 242:	00 c0       	rjmp	.+0      	; 0x244 <_ZN10TM1637Disp4sendEh+0x32>
 244:	00 00       	nop
		}
		_delay_us(DLY);
		CLK_H;										// CLKにHIGHを出力
 246:	83 b1       	in	r24, 0x03	; 3
 248:	81 60       	ori	r24, 0x01	; 1
 24a:	85 b9       	out	0x05, r24	; 5
 24c:	8f e8       	ldi	r24, 0x8F	; 143
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <_ZN10TM1637Disp4sendEh+0x3e>
 254:	00 c0       	rjmp	.+0      	; 0x256 <_ZN10TM1637Disp4sendEh+0x44>
 256:	00 00       	nop
		_delay_us(DLY);
		data >>= 1;									// 出力データを1ビット右シフト
 258:	66 95       	lsr	r22
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	31 09       	sbc	r19, r1

///////////////////////////////////////////////////////////
//		Byte data 送信関数
///////////////////////////////////////////////////////////
void	TM1637Disp::send( UCHR	data){
	for( int i=0; i<8; i++){						// 8Bitデータ送出なので8回Loopする．
 25e:	d9 f6       	brne	.-74     	; 0x216 <_ZN10TM1637Disp4sendEh+0x4>
		CLK_H;										// CLKにHIGHを出力
		_delay_us(DLY);
		data >>= 1;									// 出力データを1ビット右シフト
	}
	// ACK待ち
	CLK_L;
 260:	83 b1       	in	r24, 0x03	; 3
 262:	8e 7f       	andi	r24, 0xFE	; 254
 264:	85 b9       	out	0x05, r24	; 5
 266:	8f e8       	ldi	r24, 0x8F	; 143
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <_ZN10TM1637Disp4sendEh+0x58>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <_ZN10TM1637Disp4sendEh+0x5e>
 270:	00 00       	nop
	_delay_us(DLY);
	// CLKをHIGHにしてACK解除
	CLK_H;											// CLKにHIGHを出力
 272:	83 b1       	in	r24, 0x03	; 3
 274:	81 60       	ori	r24, 0x01	; 1
 276:	85 b9       	out	0x05, r24	; 5
 278:	8f e8       	ldi	r24, 0x8F	; 143
 27a:	91 e0       	ldi	r25, 0x01	; 1
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <_ZN10TM1637Disp4sendEh+0x6a>
 280:	00 c0       	rjmp	.+0      	; 0x282 <_ZN10TM1637Disp4sendEh+0x70>
 282:	00 00       	nop
	_delay_us(DLY);
	DIO_L;											// DIOにLOWを出力
 284:	83 b1       	in	r24, 0x03	; 3
 286:	8f 7e       	andi	r24, 0xEF	; 239
 288:	85 b9       	out	0x05, r24	; 5
 28a:	8f e8       	ldi	r24, 0x8F	; 143
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <_ZN10TM1637Disp4sendEh+0x7c>
 292:	00 c0       	rjmp	.+0      	; 0x294 <_ZN10TM1637Disp4sendEh+0x82>
 294:	00 00       	nop
	_delay_us(DLY);
	CLK_L;											// CLKにLOWを出力
 296:	83 b1       	in	r24, 0x03	; 3
 298:	8e 7f       	andi	r24, 0xFE	; 254
 29a:	85 b9       	out	0x05, r24	; 5
 29c:	8f e8       	ldi	r24, 0x8F	; 143
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <_ZN10TM1637Disp4sendEh+0x8e>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <_ZN10TM1637Disp4sendEh+0x94>
 2a6:	00 00       	nop
 2a8:	08 95       	ret

000002aa <_ZN10TM1637Disp7numDispEPh>:
//         4桁7セグメントLEDに表示する．
//         但し，上記表示文字に.を付加する場合は，コードに0x80を
//         加算する．
//
///////////////////////////////////////////////////////////
void	TM1637Disp::numDisp( UCHR *ptr){
 2aa:	ef 92       	push	r14
 2ac:	ff 92       	push	r15
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	ec 01       	movw	r28, r24
 2b8:	06 2f       	mov	r16, r22
 2ba:	17 2f       	mov	r17, r23

	TM_DDR |= CLK|DIO;								// CLKポートDIOポートを出力に設定
 2bc:	84 b1       	in	r24, 0x04	; 4
 2be:	81 61       	ori	r24, 0x11	; 17
 2c0:	84 b9       	out	0x04, r24	; 4
	Start_bit();									// Start bit 送信
 2c2:	ce 01       	movw	r24, r28
 2c4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_ZN10TM1637Disp9Start_bitEv>
	send(MODE);										// モード送信
 2c8:	64 e4       	ldi	r22, 0x44	; 68
 2ca:	ce 01       	movw	r24, r28
 2cc:	0e 94 09 01 	call	0x212	; 0x212 <_ZN10TM1637Disp4sendEh>
	Stop_bit();										// Stop bit 送信
 2d0:	ce 01       	movw	r24, r28
 2d2:	0e 94 ed 00 	call	0x1da	; 0x1da <_ZN10TM1637Disp8Stop_bitEv>
 2d6:	e0 2e       	mov	r14, r16
 2d8:	f1 2e       	mov	r15, r17
 2da:	10 ec       	ldi	r17, 0xC0	; 192

	for( int i = 0; i < 4; i++){					// 4桁分のLoop
		Start_bit();								// START Bit 送信
 2dc:	ce 01       	movw	r24, r28
 2de:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_ZN10TM1637Disp9Start_bitEv>
		send(ADDR + i);								// 表示エリアのアドレス送信
 2e2:	61 2f       	mov	r22, r17
 2e4:	ce 01       	movw	r24, r28
 2e6:	0e 94 09 01 	call	0x212	; 0x212 <_ZN10TM1637Disp4sendEh>
		if( *ptr >= 0x80){							// ドットを付加する場合
 2ea:	f7 01       	movw	r30, r14
 2ec:	81 91       	ld	r24, Z+
 2ee:	7f 01       	movw	r14, r30
 2f0:	88 23       	and	r24, r24
 2f2:	5c f4       	brge	.+22     	; 0x30a <_ZN10TM1637Disp7numDispEPh+0x60>
			send(this->segPattern[(int)(*ptr-0x80)]|0x80);// ドットのセグメントを付加した情報を送信
 2f4:	fe 01       	movw	r30, r28
 2f6:	e8 0f       	add	r30, r24
 2f8:	f1 1d       	adc	r31, r1
 2fa:	e0 58       	subi	r30, 0x80	; 128
 2fc:	f1 09       	sbc	r31, r1
 2fe:	60 81       	ld	r22, Z
 300:	60 68       	ori	r22, 0x80	; 128
 302:	ce 01       	movw	r24, r28
 304:	0e 94 09 01 	call	0x212	; 0x212 <_ZN10TM1637Disp4sendEh>
 308:	07 c0       	rjmp	.+14     	; 0x318 <_ZN10TM1637Disp7numDispEPh+0x6e>
			} else {								// ドットを付加しない場合
			send(this->segPattern[(int)*ptr]);			// ドットなしの表示情報を送信
 30a:	fe 01       	movw	r30, r28
 30c:	e8 0f       	add	r30, r24
 30e:	f1 1d       	adc	r31, r1
 310:	60 81       	ld	r22, Z
 312:	ce 01       	movw	r24, r28
 314:	0e 94 09 01 	call	0x212	; 0x212 <_ZN10TM1637Disp4sendEh>
		}
		Stop_bit();									// STOP Bit 送信
 318:	ce 01       	movw	r24, r28
 31a:	0e 94 ed 00 	call	0x1da	; 0x1da <_ZN10TM1637Disp8Stop_bitEv>
 31e:	1f 5f       	subi	r17, 0xFF	; 255
	TM_DDR |= CLK|DIO;								// CLKポートDIOポートを出力に設定
	Start_bit();									// Start bit 送信
	send(MODE);										// モード送信
	Stop_bit();										// Stop bit 送信

	for( int i = 0; i < 4; i++){					// 4桁分のLoop
 320:	14 3c       	cpi	r17, 0xC4	; 196
 322:	e1 f6       	brne	.-72     	; 0x2dc <_ZN10TM1637Disp7numDispEPh+0x32>
		}
		Stop_bit();									// STOP Bit 送信
		ptr++;										// 表示桁を進める
	}

	Start_bit();									// STOP Bit 送信
 324:	ce 01       	movw	r24, r28
 326:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_ZN10TM1637Disp9Start_bitEv>
	send(DCNT);										// Display Control Command 送信
 32a:	6f e8       	ldi	r22, 0x8F	; 143
 32c:	ce 01       	movw	r24, r28
 32e:	0e 94 09 01 	call	0x212	; 0x212 <_ZN10TM1637Disp4sendEh>
	Stop_bit();										// STOP Bit 送信
 332:	ce 01       	movw	r24, r28
 334:	0e 94 ed 00 	call	0x1da	; 0x1da <_ZN10TM1637Disp8Stop_bitEv>
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	ff 90       	pop	r15
 342:	ef 90       	pop	r14
 344:	08 95       	ret

00000346 <_exit>:
 346:	f8 94       	cli

00000348 <__stop_program>:
 348:	ff cf       	rjmp	.-2      	; 0x348 <__stop_program>
